# frozen_string_literal: true
# THIS IS NOT AUTOGENERATED
require 'spec_helper'

RSpec.describe ExpediaRapid::ApiResponseHeaders do
  let(:headers_hash) do
    {
      'vary' => 'Origin, Access-Control-Request-Method, Access-Control-Request-Headers, accept-encoding',
      'content-type' => 'application/json',
      'load' => '250',
      'pagination-total-results' => '654423',
      'link' => "<https://test.ean.com/v3/properties/content?token=Q11RF1Vda1AtSDVYFAwpdAlU=>; rel=\"next\"; expires=2025-05-15T10:52:29.122562672Z",
      'transaction-id' => 'c0e27d48-64da-46fa-8647-06f200c7c36a',
      'server' => 'EAN',
      'cache-control' => 'no-cache, no-store, max-age=0, must-revalidate',
      'pragma' => 'no-cache',
      'expires' => '0',
      'x-content-type-options' => 'nosniff',
      'strict-transport-security' => 'max-age=31536000 ; includeSubDomains',
      'x-frame-options' => 'DENY',
      'x-xss-protection' => '0',
      'referrer-policy' => 'no-referrer',
      'region' => 'us-west-2',
      'date' => 'Thu, 15 May 2025 09:52:29 GMT',
      'transfer-encoding' => 'chunked',
      'connection' => 'keep-alive, Transfer-Encoding',
      'set-cookie' => 'ak_bmsciRKIx4Ov2nZUT7ERePcOxsGCt1mwSu8=; Domain=.ean.com; Path=/; Expires=Thu, 15 May 2025 11:52:27 GMT; Max-Age=7198',
      'Content-Length' => '12901032'
    }
  end

  let(:faraday_headers) { Faraday::Utils::Headers.new(headers_hash) }
  let(:headers) { described_class.new(faraday_headers) }

  describe 'general headers' do
    it 'returns correct header values' do
      expect(headers.vary).to eq 'Origin, Access-Control-Request-Method, Access-Control-Request-Headers, accept-encoding'
      expect(headers.content_type).to eq 'application/json'
      expect(headers.cache_control).to eq 'no-cache, no-store, max-age=0, must-revalidate'
      expect(headers.pragma).to eq 'no-cache'
      expect(headers.expires).to eq '0'
      expect(headers.content_type_options).to eq 'nosniff'
      expect(headers.transport_security).to eq 'max-age=31536000 ; includeSubDomains'
      expect(headers.frame_options).to eq 'DENY'
      expect(headers.xss_protection).to eq '0'
      expect(headers.referrer_policy).to eq 'no-referrer'
      expect(headers.date).to eq 'Thu, 15 May 2025 09:52:29 GMT'
      expect(headers.transfer_encoding).to eq 'chunked'
      expect(headers.connection).to eq 'keep-alive, Transfer-Encoding'
      expect(headers.content_length).to eq '12901032'
    end
  end

  describe 'custom headers' do
    it 'returns correct custom header values' do
      expect(headers.load).to eq '250'
      expect(headers.pagination_total_results).to eq '654423'
      expect(headers.link).to include 'https://test.ean.com/v3/properties/content'
      expect(headers.transaction_id).to eq 'c0e27d48-64da-46fa-8647-06f200c7c36a'
      expect(headers.server).to eq 'EAN'
      expect(headers.region).to eq 'us-west-2'
    end
  end

  describe ExpediaRapid::ApiResponseHeaders::Link do
    let(:link) { described_class.new(headers_hash['link']) }

    it 'parses link header correctly' do
      expect(link.url).to eq 'https://test.ean.com/v3/properties/content?token=Q11RF1Vda1AtSDVYFAwpdAlU='
      expect(link.rel).to eq 'next'
      expect(link.expires).to eq(Time.parse('2025-05-15T10:52:29.122562672Z'))
    end
  end

  describe ExpediaRapid::ApiResponseHeaders::RateLimit do
    let(:rate_limit_headers) do
      {
        'rate-limit-day' => '5000',
        'rate-limit-day-remaining' => '4500',
        'rate-limit-day-reset' => '2025-05-16T00:00:00Z',
        'rate-limit-minute-remaining' => '59',
        'rate-limit-minute-reset' => '2025-05-15T10:53:00Z',
        'rate-limit-reduction-status' => 'none'
      }
    end
    let(:rate_limit) { described_class.new(Faraday::Utils::Headers.new(rate_limit_headers)) }

    it 'returns correct rate limit values' do
      expect(rate_limit.day).to eq '5000'
      expect(rate_limit.day_remaining).to eq '4500'
      expect(rate_limit.day_reset).to eq '2025-05-16T00:00:00Z'
      expect(rate_limit.minute_remaining).to eq '59'
      expect(rate_limit.minute_reset).to eq '2025-05-15T10:53:00Z'
      expect(rate_limit.reduction_status).to eq 'none'
    end
  end
end
