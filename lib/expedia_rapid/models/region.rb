=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  class Region
    # Region Id.
    attr_accessor :id

    # Region type.
    attr_accessor :type

    # Region name.
    attr_accessor :name

    # Full region name.
    attr_accessor :name_full

    # Specific information about the region e.g. whether it covers surrounding areas for a city. Only present when relevant for a region. See our [region descriptors reference](https://developers.expediagroup.com/docs/rapid/lodging/geography/geography-reference-lists) for current known descriptor values.
    attr_accessor :descriptor

    # 3-character IATA airport code.
    attr_accessor :iata_airport_code

    # 3-character IATA airport metropolitan code of the metropolitan airport area.
    attr_accessor :iata_airport_metro_code

    # Region country code (ISO 3166-1 alpha-2).
    attr_accessor :country_code

    # Region country subdivision code (ISO 3166-2).
    attr_accessor :country_subdivision_code

    attr_accessor :coordinates

    # A map of region types to a sorted array of region ids with a touristic association to the region.
    attr_accessor :associations

    # An array of the region's ancestors.
    attr_accessor :ancestors

    # A map of region types to an array of region ids. The region ids are direct descendants of the region.
    attr_accessor :descendants

    # An array of associated property ids for the region.
    attr_accessor :property_ids

    # An array of associated property ids within an expanded radius for the region.
    attr_accessor :property_ids_expanded

    # A list of regional categories.
    attr_accessor :categories

    # A list of regional tags.
    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'name' => :'name',
        :'name_full' => :'name_full',
        :'descriptor' => :'descriptor',
        :'iata_airport_code' => :'iata_airport_code',
        :'iata_airport_metro_code' => :'iata_airport_metro_code',
        :'country_code' => :'country_code',
        :'country_subdivision_code' => :'country_subdivision_code',
        :'coordinates' => :'coordinates',
        :'associations' => :'associations',
        :'ancestors' => :'ancestors',
        :'descendants' => :'descendants',
        :'property_ids' => :'property_ids',
        :'property_ids_expanded' => :'property_ids_expanded',
        :'categories' => :'categories',
        :'tags' => :'tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'type' => :'String',
        :'name' => :'String',
        :'name_full' => :'String',
        :'descriptor' => :'String',
        :'iata_airport_code' => :'String',
        :'iata_airport_metro_code' => :'String',
        :'country_code' => :'String',
        :'country_subdivision_code' => :'String',
        :'coordinates' => :'GetRegions200ResponseInnerCoordinates',
        :'associations' => :'Hash<String, Array<String>>',
        :'ancestors' => :'Array<GetRegions200ResponseInnerAncestorsInner>',
        :'descendants' => :'Hash<String, Array<String>>',
        :'property_ids' => :'Array<String>',
        :'property_ids_expanded' => :'Array<String>',
        :'categories' => :'Array<String>',
        :'tags' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::Region` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::Region`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'name_full')
        self.name_full = attributes[:'name_full']
      end

      if attributes.key?(:'descriptor')
        self.descriptor = attributes[:'descriptor']
      end

      if attributes.key?(:'iata_airport_code')
        self.iata_airport_code = attributes[:'iata_airport_code']
      end

      if attributes.key?(:'iata_airport_metro_code')
        self.iata_airport_metro_code = attributes[:'iata_airport_metro_code']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_subdivision_code')
        self.country_subdivision_code = attributes[:'country_subdivision_code']
      end

      if attributes.key?(:'coordinates')
        self.coordinates = attributes[:'coordinates']
      end

      if attributes.key?(:'associations')
        if (value = attributes[:'associations']).is_a?(Hash)
          self.associations = value
        end
      end

      if attributes.key?(:'ancestors')
        if (value = attributes[:'ancestors']).is_a?(Array)
          self.ancestors = value
        end
      end

      if attributes.key?(:'descendants')
        if (value = attributes[:'descendants']).is_a?(Hash)
          self.descendants = value
        end
      end

      if attributes.key?(:'property_ids')
        if (value = attributes[:'property_ids']).is_a?(Array)
          self.property_ids = value
        end
      end

      if attributes.key?(:'property_ids_expanded')
        if (value = attributes[:'property_ids_expanded']).is_a?(Array)
          self.property_ids_expanded = value
        end
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          name == o.name &&
          name_full == o.name_full &&
          descriptor == o.descriptor &&
          iata_airport_code == o.iata_airport_code &&
          iata_airport_metro_code == o.iata_airport_metro_code &&
          country_code == o.country_code &&
          country_subdivision_code == o.country_subdivision_code &&
          coordinates == o.coordinates &&
          associations == o.associations &&
          ancestors == o.ancestors &&
          descendants == o.descendants &&
          property_ids == o.property_ids &&
          property_ids_expanded == o.property_ids_expanded &&
          categories == o.categories &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, name, name_full, descriptor, iata_airport_code, iata_airport_metro_code, country_code, country_subdivision_code, coordinates, associations, ancestors, descendants, property_ids, property_ids_expanded, categories, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
