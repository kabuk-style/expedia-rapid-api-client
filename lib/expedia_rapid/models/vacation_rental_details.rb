=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  # Details for vacation rental properties.
  class VacationRentalDetails
    # The property's registry number required by some jurisdictions.
    attr_accessor :registry_number

    # Indicates if a property has a private host.
    attr_accessor :private_host

    attr_accessor :property_manager

    attr_accessor :rental_agreement

    # List of strings detailing house rules.
    attr_accessor :house_rules

    # Map of enhanced house rules.
    attr_accessor :enhanced_house_rules

    attr_accessor :amenities

    # The Vrbo srp needed for link-off.
    attr_accessor :vrbo_srp_id

    # The listing id for a Vrbo property.
    attr_accessor :listing_id

    # The listing number for a Vrbo property.
    attr_accessor :listing_number

    # The listing source.
    attr_accessor :listing_source

    # The specific unit.
    attr_accessor :listing_unit

    # The name of the IPM used to build guest messaging to inform travelers of the name of the IPM who will charge their card and/or send them a confirmation email. 
    attr_accessor :ipm_name

    # Map of the vacation rental unit configurations. The key value is the unit location.
    attr_accessor :unit_configurations

    # A free text description that could contain significantly unstructured information that could impact the booking and should be displayed to customers. This field could contain html break tags `<br>` that may make display challenging.
    attr_accessor :free_text

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'registry_number' => :'registry_number',
        :'private_host' => :'private_host',
        :'property_manager' => :'property_manager',
        :'rental_agreement' => :'rental_agreement',
        :'house_rules' => :'house_rules',
        :'enhanced_house_rules' => :'enhanced_house_rules',
        :'amenities' => :'amenities',
        :'vrbo_srp_id' => :'vrbo_srp_id',
        :'listing_id' => :'listing_id',
        :'listing_number' => :'listing_number',
        :'listing_source' => :'listing_source',
        :'listing_unit' => :'listing_unit',
        :'ipm_name' => :'ipm_name',
        :'unit_configurations' => :'unit_configurations',
        :'free_text' => :'free_text'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'registry_number' => :'String',
        :'private_host' => :'Boolean',
        :'property_manager' => :'GetPropertyContent200ResponseValueVacationRentalDetailsPropertyManager',
        :'rental_agreement' => :'GetPropertyContent200ResponseValueVacationRentalDetailsRentalAgreement',
        :'house_rules' => :'Array<String>',
        :'enhanced_house_rules' => :'Hash<String, GetPropertyContent200ResponseValueVacationRentalDetailsEnhancedHouseRulesValue>',
        :'amenities' => :'GetPropertyContent200ResponseValueAmenitiesValue',
        :'vrbo_srp_id' => :'String',
        :'listing_id' => :'String',
        :'listing_number' => :'String',
        :'listing_source' => :'String',
        :'listing_unit' => :'String',
        :'ipm_name' => :'String',
        :'unit_configurations' => :'Hash<String, Array<GetPropertyContent200ResponseValueVacationRentalDetailsUnitConfigurationsValueInner>>',
        :'free_text' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::VacationRentalDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::VacationRentalDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'registry_number')
        self.registry_number = attributes[:'registry_number']
      end

      if attributes.key?(:'private_host')
        self.private_host = attributes[:'private_host']
      end

      if attributes.key?(:'property_manager')
        self.property_manager = attributes[:'property_manager']
      end

      if attributes.key?(:'rental_agreement')
        self.rental_agreement = attributes[:'rental_agreement']
      end

      if attributes.key?(:'house_rules')
        if (value = attributes[:'house_rules']).is_a?(Array)
          self.house_rules = value
        end
      end

      if attributes.key?(:'enhanced_house_rules')
        if (value = attributes[:'enhanced_house_rules']).is_a?(Hash)
          self.enhanced_house_rules = value
        end
      end

      if attributes.key?(:'amenities')
        self.amenities = attributes[:'amenities']
      end

      if attributes.key?(:'vrbo_srp_id')
        self.vrbo_srp_id = attributes[:'vrbo_srp_id']
      end

      if attributes.key?(:'listing_id')
        self.listing_id = attributes[:'listing_id']
      end

      if attributes.key?(:'listing_number')
        self.listing_number = attributes[:'listing_number']
      end

      if attributes.key?(:'listing_source')
        self.listing_source = attributes[:'listing_source']
      end

      if attributes.key?(:'listing_unit')
        self.listing_unit = attributes[:'listing_unit']
      end

      if attributes.key?(:'ipm_name')
        self.ipm_name = attributes[:'ipm_name']
      end

      if attributes.key?(:'unit_configurations')
        if (value = attributes[:'unit_configurations']).is_a?(Hash)
          self.unit_configurations = value
        end
      end

      if attributes.key?(:'free_text')
        self.free_text = attributes[:'free_text']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          registry_number == o.registry_number &&
          private_host == o.private_host &&
          property_manager == o.property_manager &&
          rental_agreement == o.rental_agreement &&
          house_rules == o.house_rules &&
          enhanced_house_rules == o.enhanced_house_rules &&
          amenities == o.amenities &&
          vrbo_srp_id == o.vrbo_srp_id &&
          listing_id == o.listing_id &&
          listing_number == o.listing_number &&
          listing_source == o.listing_source &&
          listing_unit == o.listing_unit &&
          ipm_name == o.ipm_name &&
          unit_configurations == o.unit_configurations &&
          free_text == o.free_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [registry_number, private_host, property_manager, rental_agreement, house_rules, enhanced_house_rules, amenities, vrbo_srp_id, listing_id, listing_number, listing_source, listing_unit, ipm_name, unit_configurations, free_text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
