=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  class PostPaymentSessionsRequestCustomerAccountDetails
    # Mechanism used by the cardholder to authenticate to the merchant.
    attr_accessor :authentication_method

    # Date and time in UTC of the cardholder authentication, in extended ISO 8601 format.
    attr_accessor :authentication_timestamp

    # Date the cardholder opened the account with the merchant, in ISO 8601 format (YYYY-MM-DD).
    attr_accessor :create_date

    # Date the cardholder’s account with the merchant was last changed, including Billing or Shipping address, new payment account, or new user(s) added, in ISO 8601 format (YYYY-MM-DD).
    attr_accessor :change_date

    # Date the cardholder’s account with the merchant had a password change or account reset, in ISO 8601 format (YYYY-MM-DD).
    attr_accessor :password_change_date

    # Number of add card attempts in the last 24 hours.
    attr_accessor :add_card_attempts

    # Number of purchases with this cardholder's account during the previous six months.
    attr_accessor :account_purchases

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authentication_method' => :'authentication_method',
        :'authentication_timestamp' => :'authentication_timestamp',
        :'create_date' => :'create_date',
        :'change_date' => :'change_date',
        :'password_change_date' => :'password_change_date',
        :'add_card_attempts' => :'add_card_attempts',
        :'account_purchases' => :'account_purchases'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'authentication_method' => :'String',
        :'authentication_timestamp' => :'String',
        :'create_date' => :'String',
        :'change_date' => :'String',
        :'password_change_date' => :'String',
        :'add_card_attempts' => :'Float',
        :'account_purchases' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::PostPaymentSessionsRequestCustomerAccountDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::PostPaymentSessionsRequestCustomerAccountDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'authentication_method')
        self.authentication_method = attributes[:'authentication_method']
      end

      if attributes.key?(:'authentication_timestamp')
        self.authentication_timestamp = attributes[:'authentication_timestamp']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.key?(:'change_date')
        self.change_date = attributes[:'change_date']
      end

      if attributes.key?(:'password_change_date')
        self.password_change_date = attributes[:'password_change_date']
      end

      if attributes.key?(:'add_card_attempts')
        self.add_card_attempts = attributes[:'add_card_attempts']
      end

      if attributes.key?(:'account_purchases')
        self.account_purchases = attributes[:'account_purchases']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      authentication_method_validator = EnumAttributeValidator.new('String', ["guest", "own_credentials", "federated_id", "issuer_credentials", "third_party_authentication", "fido_authentication"])
      return false unless authentication_method_validator.valid?(@authentication_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_method Object to be assigned
    def authentication_method=(authentication_method)
      validator = EnumAttributeValidator.new('String', ["guest", "own_credentials", "federated_id", "issuer_credentials", "third_party_authentication", "fido_authentication"])
      unless validator.valid?(authentication_method)
        fail ArgumentError, "invalid value for \"authentication_method\", must be one of #{validator.allowable_values}."
      end
      @authentication_method = authentication_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authentication_method == o.authentication_method &&
          authentication_timestamp == o.authentication_timestamp &&
          create_date == o.create_date &&
          change_date == o.change_date &&
          password_change_date == o.password_change_date &&
          add_card_attempts == o.add_card_attempts &&
          account_purchases == o.account_purchases
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [authentication_method, authentication_timestamp, create_date, change_date, password_change_date, add_card_attempts, account_purchases].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
