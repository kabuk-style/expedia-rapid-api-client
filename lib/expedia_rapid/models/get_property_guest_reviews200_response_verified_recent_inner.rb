=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  # A review object for a property.
  class GetPropertyGuestReviews200ResponseVerifiedRecentInner
    # Where this review has been verified from.
    attr_accessor :verification_source

    # Title of this review.
    attr_accessor :title

    # When this review was made, in ISO 8601 format.
    attr_accessor :date_submitted

    # The rating for this property given by the reviewer. Returns a value between 1.0 and 5.0.
    attr_accessor :rating

    # The name of the person who wrote this review.
    attr_accessor :reviewer_name

    # The year and month of the traveler's stay at the property, in ISO 8601 format (YYYY-MM).
    attr_accessor :stay_date

    # The reason category for this reviewer's trip.
    attr_accessor :trip_reason

    # The companion category for any travelers that accompanied this reviewer.
    attr_accessor :travel_companion

    # The text of the review itself.
    attr_accessor :text

    # A collection of the management responses to this review.
    attr_accessor :management_responses

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'verification_source' => :'verification_source',
        :'title' => :'title',
        :'date_submitted' => :'date_submitted',
        :'rating' => :'rating',
        :'reviewer_name' => :'reviewer_name',
        :'stay_date' => :'stay_date',
        :'trip_reason' => :'trip_reason',
        :'travel_companion' => :'travel_companion',
        :'text' => :'text',
        :'management_responses' => :'management_responses'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'verification_source' => :'String',
        :'title' => :'String',
        :'date_submitted' => :'String',
        :'rating' => :'String',
        :'reviewer_name' => :'String',
        :'stay_date' => :'String',
        :'trip_reason' => :'String',
        :'travel_companion' => :'String',
        :'text' => :'String',
        :'management_responses' => :'Array<GetPropertyGuestReviews200ResponseVerifiedRecentInnerManagementResponsesInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::GetPropertyGuestReviews200ResponseVerifiedRecentInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::GetPropertyGuestReviews200ResponseVerifiedRecentInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'verification_source')
        self.verification_source = attributes[:'verification_source']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'date_submitted')
        self.date_submitted = attributes[:'date_submitted']
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.key?(:'reviewer_name')
        self.reviewer_name = attributes[:'reviewer_name']
      end

      if attributes.key?(:'stay_date')
        self.stay_date = attributes[:'stay_date']
      end

      if attributes.key?(:'trip_reason')
        self.trip_reason = attributes[:'trip_reason']
      end

      if attributes.key?(:'travel_companion')
        self.travel_companion = attributes[:'travel_companion']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'management_responses')
        if (value = attributes[:'management_responses']).is_a?(Array)
          self.management_responses = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      trip_reason_validator = EnumAttributeValidator.new('String', ["business", "leisure", "friends_and_family", "business_and_leisure"])
      return false unless trip_reason_validator.valid?(@trip_reason)
      travel_companion_validator = EnumAttributeValidator.new('String', ["family", "family_with_children", "partner", "self", "friends", "pet"])
      return false unless travel_companion_validator.valid?(@travel_companion)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trip_reason Object to be assigned
    def trip_reason=(trip_reason)
      validator = EnumAttributeValidator.new('String', ["business", "leisure", "friends_and_family", "business_and_leisure"])
      unless validator.valid?(trip_reason)
        fail ArgumentError, "invalid value for \"trip_reason\", must be one of #{validator.allowable_values}."
      end
      @trip_reason = trip_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] travel_companion Object to be assigned
    def travel_companion=(travel_companion)
      validator = EnumAttributeValidator.new('String', ["family", "family_with_children", "partner", "self", "friends", "pet"])
      unless validator.valid?(travel_companion)
        fail ArgumentError, "invalid value for \"travel_companion\", must be one of #{validator.allowable_values}."
      end
      @travel_companion = travel_companion
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          verification_source == o.verification_source &&
          title == o.title &&
          date_submitted == o.date_submitted &&
          rating == o.rating &&
          reviewer_name == o.reviewer_name &&
          stay_date == o.stay_date &&
          trip_reason == o.trip_reason &&
          travel_companion == o.travel_companion &&
          text == o.text &&
          management_responses == o.management_responses
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [verification_source, title, date_submitted, rating, reviewer_name, stay_date, trip_reason, travel_companion, text, management_responses].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
