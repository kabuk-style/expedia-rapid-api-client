=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  class PostPaymentSessionsRequest
    # The version of the EgPayments.js library.
    attr_accessor :version

    # The customer's browser accept header that was used in the booking request.
    attr_accessor :browser_accept_header

    # Encoded browser metadata, provided by the EgPayments.js library.
    attr_accessor :encoded_browser_metadata

    # The preferred window size that needs to be displayed to the customer. Following are the possible values of this field:   * `extra_small`: 250 x 400   * `small`: 390 x 400   * `medium`: 600 x 400   * `large`: 500 x 600   * `full_screen`: Full screen
    attr_accessor :preferred_challenge_window_size

    # Fully qualified URL of merchant website or customer care site.
    attr_accessor :merchant_url

    attr_accessor :customer_account_details

    attr_accessor :payments

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'version' => :'version',
        :'browser_accept_header' => :'browser_accept_header',
        :'encoded_browser_metadata' => :'encoded_browser_metadata',
        :'preferred_challenge_window_size' => :'preferred_challenge_window_size',
        :'merchant_url' => :'merchant_url',
        :'customer_account_details' => :'customer_account_details',
        :'payments' => :'payments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'version' => :'String',
        :'browser_accept_header' => :'String',
        :'encoded_browser_metadata' => :'String',
        :'preferred_challenge_window_size' => :'String',
        :'merchant_url' => :'String',
        :'customer_account_details' => :'PostPaymentSessionsRequestCustomerAccountDetails',
        :'payments' => :'Array<PostPaymentSessionsRequestPaymentsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::PostPaymentSessionsRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::PostPaymentSessionsRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = nil
      end

      if attributes.key?(:'browser_accept_header')
        self.browser_accept_header = attributes[:'browser_accept_header']
      else
        self.browser_accept_header = nil
      end

      if attributes.key?(:'encoded_browser_metadata')
        self.encoded_browser_metadata = attributes[:'encoded_browser_metadata']
      else
        self.encoded_browser_metadata = nil
      end

      if attributes.key?(:'preferred_challenge_window_size')
        self.preferred_challenge_window_size = attributes[:'preferred_challenge_window_size']
      else
        self.preferred_challenge_window_size = nil
      end

      if attributes.key?(:'merchant_url')
        self.merchant_url = attributes[:'merchant_url']
      else
        self.merchant_url = nil
      end

      if attributes.key?(:'customer_account_details')
        self.customer_account_details = attributes[:'customer_account_details']
      else
        self.customer_account_details = nil
      end

      if attributes.key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      else
        self.payments = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @browser_accept_header.nil?
        invalid_properties.push('invalid value for "browser_accept_header", browser_accept_header cannot be nil.')
      end

      if @encoded_browser_metadata.nil?
        invalid_properties.push('invalid value for "encoded_browser_metadata", encoded_browser_metadata cannot be nil.')
      end

      if @preferred_challenge_window_size.nil?
        invalid_properties.push('invalid value for "preferred_challenge_window_size", preferred_challenge_window_size cannot be nil.')
      end

      if @merchant_url.nil?
        invalid_properties.push('invalid value for "merchant_url", merchant_url cannot be nil.')
      end

      if @customer_account_details.nil?
        invalid_properties.push('invalid value for "customer_account_details", customer_account_details cannot be nil.')
      end

      if @payments.nil?
        invalid_properties.push('invalid value for "payments", payments cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @version.nil?
      return false if @browser_accept_header.nil?
      return false if @encoded_browser_metadata.nil?
      return false if @preferred_challenge_window_size.nil?
      preferred_challenge_window_size_validator = EnumAttributeValidator.new('String', ["extra_small", "small", "medium", "large", "full_screen"])
      return false unless preferred_challenge_window_size_validator.valid?(@preferred_challenge_window_size)
      return false if @merchant_url.nil?
      return false if @customer_account_details.nil?
      return false if @payments.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferred_challenge_window_size Object to be assigned
    def preferred_challenge_window_size=(preferred_challenge_window_size)
      validator = EnumAttributeValidator.new('String', ["extra_small", "small", "medium", "large", "full_screen"])
      unless validator.valid?(preferred_challenge_window_size)
        fail ArgumentError, "invalid value for \"preferred_challenge_window_size\", must be one of #{validator.allowable_values}."
      end
      @preferred_challenge_window_size = preferred_challenge_window_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          version == o.version &&
          browser_accept_header == o.browser_accept_header &&
          encoded_browser_metadata == o.encoded_browser_metadata &&
          preferred_challenge_window_size == o.preferred_challenge_window_size &&
          merchant_url == o.merchant_url &&
          customer_account_details == o.customer_account_details &&
          payments == o.payments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [version, browser_accept_header, encoded_browser_metadata, preferred_challenge_window_size, merchant_url, customer_account_details, payments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
