=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  # The itinerary object.
  class GetReservation200ResponseInner
    # The itinerary id.
    attr_accessor :itinerary_id

    # The property id.
    attr_accessor :property_id

    attr_accessor :links

    # Email address for the customer.
    attr_accessor :email

    attr_accessor :phone

    attr_accessor :rooms

    attr_accessor :billing_contact

    attr_accessor :adjustment

    # The creation date/time of the booking.
    attr_accessor :creation_date_time

    # Your unique reference value. This field supports from 3 to a maximum of 28 characters.
    attr_accessor :affiliate_reference_id

    # Field that stores up to 256 characters of additional metadata with the itinerary, uniqueness is not required.
    attr_accessor :affiliate_metadata

    attr_accessor :conversations

    attr_accessor :trader_information

    attr_accessor :essential_information

    # Value potentially passed in during the availability request to indicate the purpose of the trip designated by the traveler. 
    attr_accessor :travel_purpose

    attr_accessor :supplier_transparency

    attr_accessor :additional_handling

    attr_accessor :invoicing

    attr_accessor :itinerary_history

    # An array of rooms each containing an array of room history events.
    attr_accessor :room_history

    attr_accessor :impacted_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'itinerary_id' => :'itinerary_id',
        :'property_id' => :'property_id',
        :'links' => :'links',
        :'email' => :'email',
        :'phone' => :'phone',
        :'rooms' => :'rooms',
        :'billing_contact' => :'billing_contact',
        :'adjustment' => :'adjustment',
        :'creation_date_time' => :'creation_date_time',
        :'affiliate_reference_id' => :'affiliate_reference_id',
        :'affiliate_metadata' => :'affiliate_metadata',
        :'conversations' => :'conversations',
        :'trader_information' => :'trader_information',
        :'essential_information' => :'essential_information',
        :'travel_purpose' => :'travel_purpose',
        :'supplier_transparency' => :'supplier_transparency',
        :'additional_handling' => :'additional_handling',
        :'invoicing' => :'invoicing',
        :'itinerary_history' => :'itinerary_history',
        :'room_history' => :'room_history',
        :'impacted_fields' => :'impacted_fields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'itinerary_id' => :'String',
        :'property_id' => :'String',
        :'links' => :'GetReservation200ResponseInnerLinks',
        :'email' => :'String',
        :'phone' => :'PostPaymentSessionsRequestPaymentsInnerAdditionalHandlingCardContactPhone',
        :'rooms' => :'Array<GetReservation200ResponseInnerRoomsInner>',
        :'billing_contact' => :'GetReservation200ResponseInnerBillingContact',
        :'adjustment' => :'GetReservation200ResponseInnerAdjustment',
        :'creation_date_time' => :'String',
        :'affiliate_reference_id' => :'String',
        :'affiliate_metadata' => :'String',
        :'conversations' => :'GetReservation200ResponseInnerConversations',
        :'trader_information' => :'PriceCheck200ResponseTraderInformation',
        :'essential_information' => :'GetReservation200ResponseInnerEssentialInformation',
        :'travel_purpose' => :'String',
        :'supplier_transparency' => :'GetReservation200ResponseInnerSupplierTransparency',
        :'additional_handling' => :'PostPaymentSessionsRequestPaymentsInnerAdditionalHandling',
        :'invoicing' => :'GetReservation200ResponseInnerInvoicing',
        :'itinerary_history' => :'Array<GetReservation200ResponseInnerItineraryHistoryInner>',
        :'room_history' => :'Array<Array<GetReservation200ResponseInnerRoomHistoryInnerInner>>',
        :'impacted_fields' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::GetReservation200ResponseInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::GetReservation200ResponseInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'itinerary_id')
        self.itinerary_id = attributes[:'itinerary_id']
      end

      if attributes.key?(:'property_id')
        self.property_id = attributes[:'property_id']
      end

      if attributes.key?(:'links')
        self.links = attributes[:'links']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'rooms')
        if (value = attributes[:'rooms']).is_a?(Array)
          self.rooms = value
        end
      end

      if attributes.key?(:'billing_contact')
        self.billing_contact = attributes[:'billing_contact']
      end

      if attributes.key?(:'adjustment')
        self.adjustment = attributes[:'adjustment']
      end

      if attributes.key?(:'creation_date_time')
        self.creation_date_time = attributes[:'creation_date_time']
      end

      if attributes.key?(:'affiliate_reference_id')
        self.affiliate_reference_id = attributes[:'affiliate_reference_id']
      end

      if attributes.key?(:'affiliate_metadata')
        self.affiliate_metadata = attributes[:'affiliate_metadata']
      end

      if attributes.key?(:'conversations')
        self.conversations = attributes[:'conversations']
      end

      if attributes.key?(:'trader_information')
        self.trader_information = attributes[:'trader_information']
      end

      if attributes.key?(:'essential_information')
        self.essential_information = attributes[:'essential_information']
      end

      if attributes.key?(:'travel_purpose')
        self.travel_purpose = attributes[:'travel_purpose']
      end

      if attributes.key?(:'supplier_transparency')
        self.supplier_transparency = attributes[:'supplier_transparency']
      end

      if attributes.key?(:'additional_handling')
        self.additional_handling = attributes[:'additional_handling']
      end

      if attributes.key?(:'invoicing')
        self.invoicing = attributes[:'invoicing']
      end

      if attributes.key?(:'itinerary_history')
        if (value = attributes[:'itinerary_history']).is_a?(Array)
          self.itinerary_history = value
        end
      end

      if attributes.key?(:'room_history')
        if (value = attributes[:'room_history']).is_a?(Array)
          self.room_history = value
        end
      end

      if attributes.key?(:'impacted_fields')
        if (value = attributes[:'impacted_fields']).is_a?(Array)
          self.impacted_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      travel_purpose_validator = EnumAttributeValidator.new('String', ["leisure", "business", "unspecified"])
      return false unless travel_purpose_validator.valid?(@travel_purpose)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] travel_purpose Object to be assigned
    def travel_purpose=(travel_purpose)
      validator = EnumAttributeValidator.new('String', ["leisure", "business", "unspecified"])
      unless validator.valid?(travel_purpose)
        fail ArgumentError, "invalid value for \"travel_purpose\", must be one of #{validator.allowable_values}."
      end
      @travel_purpose = travel_purpose
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          itinerary_id == o.itinerary_id &&
          property_id == o.property_id &&
          links == o.links &&
          email == o.email &&
          phone == o.phone &&
          rooms == o.rooms &&
          billing_contact == o.billing_contact &&
          adjustment == o.adjustment &&
          creation_date_time == o.creation_date_time &&
          affiliate_reference_id == o.affiliate_reference_id &&
          affiliate_metadata == o.affiliate_metadata &&
          conversations == o.conversations &&
          trader_information == o.trader_information &&
          essential_information == o.essential_information &&
          travel_purpose == o.travel_purpose &&
          supplier_transparency == o.supplier_transparency &&
          additional_handling == o.additional_handling &&
          invoicing == o.invoicing &&
          itinerary_history == o.itinerary_history &&
          room_history == o.room_history &&
          impacted_fields == o.impacted_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [itinerary_id, property_id, links, email, phone, rooms, billing_contact, adjustment, creation_date_time, affiliate_reference_id, affiliate_metadata, conversations, trader_information, essential_information, travel_purpose, supplier_transparency, additional_handling, invoicing, itinerary_history, room_history, impacted_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
