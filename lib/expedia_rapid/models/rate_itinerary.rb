=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  # The rate information associated with the itinerary.
  class RateItinerary
    # The id of the rate.
    attr_accessor :id

    # * `expedia` - Payment is taken by Expedia. * `property` - Payment is taken by the property.
    attr_accessor :merchant_of_record

    # Indicates whether the itinerary is refundable or not.
    attr_accessor :refundable

    attr_accessor :cancel_refund

    attr_accessor :amenities

    attr_accessor :promotions

    # The cancel penalties associated with the itinerary.
    attr_accessor :cancel_penalties

    # A list of date exceptions. Dates within these ranges provide no refund on cancellation, regardless of cancel penalty windows. Nonrefundable range begins at 00:00:00 on the start date, and ends at 23:59:59 on the end date, in the local time zone of the property.
    attr_accessor :nonrefundable_date_ranges

    attr_accessor :deposits

    attr_accessor :card_on_file_limit

    attr_accessor :refundable_damage_deposit

    attr_accessor :pricing

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'merchant_of_record' => :'merchant_of_record',
        :'refundable' => :'refundable',
        :'cancel_refund' => :'cancel_refund',
        :'amenities' => :'amenities',
        :'promotions' => :'promotions',
        :'cancel_penalties' => :'cancel_penalties',
        :'nonrefundable_date_ranges' => :'nonrefundable_date_ranges',
        :'deposits' => :'deposits',
        :'card_on_file_limit' => :'card_on_file_limit',
        :'refundable_damage_deposit' => :'refundable_damage_deposit',
        :'pricing' => :'pricing'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'merchant_of_record' => :'String',
        :'refundable' => :'Boolean',
        :'cancel_refund' => :'GetReservation200ResponseInnerRoomsInnerRateCancelRefund',
        :'amenities' => :'Array<String>',
        :'promotions' => :'GetReservation200ResponseInnerRoomsInnerRatePromotions',
        :'cancel_penalties' => :'Array<GetAdditionalAvailability200ResponseInnerRoomsInnerRatesInnerCancelPenaltiesInner>',
        :'nonrefundable_date_ranges' => :'Array<GetAdditionalAvailability200ResponseInnerRoomsInnerRatesInnerNonrefundableDateRangesInner>',
        :'deposits' => :'Array<GetReservation200ResponseInnerRoomsInnerRateDepositsInner>',
        :'card_on_file_limit' => :'GetAdditionalAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValueTotalsInclusiveBillableCurrency',
        :'refundable_damage_deposit' => :'GetAdditionalAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValueTotalsInclusiveBillableCurrency',
        :'pricing' => :'GetAdditionalAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValue'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::RateItinerary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::RateItinerary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'merchant_of_record')
        self.merchant_of_record = attributes[:'merchant_of_record']
      end

      if attributes.key?(:'refundable')
        self.refundable = attributes[:'refundable']
      end

      if attributes.key?(:'cancel_refund')
        self.cancel_refund = attributes[:'cancel_refund']
      end

      if attributes.key?(:'amenities')
        if (value = attributes[:'amenities']).is_a?(Array)
          self.amenities = value
        end
      end

      if attributes.key?(:'promotions')
        self.promotions = attributes[:'promotions']
      end

      if attributes.key?(:'cancel_penalties')
        if (value = attributes[:'cancel_penalties']).is_a?(Array)
          self.cancel_penalties = value
        end
      end

      if attributes.key?(:'nonrefundable_date_ranges')
        if (value = attributes[:'nonrefundable_date_ranges']).is_a?(Array)
          self.nonrefundable_date_ranges = value
        end
      end

      if attributes.key?(:'deposits')
        if (value = attributes[:'deposits']).is_a?(Array)
          self.deposits = value
        end
      end

      if attributes.key?(:'card_on_file_limit')
        self.card_on_file_limit = attributes[:'card_on_file_limit']
      end

      if attributes.key?(:'refundable_damage_deposit')
        self.refundable_damage_deposit = attributes[:'refundable_damage_deposit']
      end

      if attributes.key?(:'pricing')
        self.pricing = attributes[:'pricing']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      merchant_of_record_validator = EnumAttributeValidator.new('String', ["expedia", "property"])
      return false unless merchant_of_record_validator.valid?(@merchant_of_record)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_of_record Object to be assigned
    def merchant_of_record=(merchant_of_record)
      validator = EnumAttributeValidator.new('String', ["expedia", "property"])
      unless validator.valid?(merchant_of_record)
        fail ArgumentError, "invalid value for \"merchant_of_record\", must be one of #{validator.allowable_values}."
      end
      @merchant_of_record = merchant_of_record
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          merchant_of_record == o.merchant_of_record &&
          refundable == o.refundable &&
          cancel_refund == o.cancel_refund &&
          amenities == o.amenities &&
          promotions == o.promotions &&
          cancel_penalties == o.cancel_penalties &&
          nonrefundable_date_ranges == o.nonrefundable_date_ranges &&
          deposits == o.deposits &&
          card_on_file_limit == o.card_on_file_limit &&
          refundable_damage_deposit == o.refundable_damage_deposit &&
          pricing == o.pricing
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, merchant_of_record, refundable, cancel_refund, amenities, promotions, cancel_penalties, nonrefundable_date_ranges, deposits, card_on_file_limit, refundable_damage_deposit, pricing].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
