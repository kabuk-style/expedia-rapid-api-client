=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ExpediaRapid
  # A rate.
  class GetAvailability200ResponseInnerRoomsInnerRatesInner
    # Unique Identifier for a rate.
    attr_accessor :id

    # Indicates the status of the rate. If the rate is still available then available will be returned. If the rate is no longer available at that price then price_changed will be returned. If the rate is no longer available at all then sold_out will be returned.
    attr_accessor :status

    # The number of bookable rooms remaining with this rate in EPS inventory. Use this value to create rules for urgency messaging to alert users to low availability on busy travel dates or at popular properties. If the value returns as 2147483647 (max int value), the actual value could not be determined. Ensure your urgency messaging ignores such instances when returned.
    attr_accessor :available_rooms

    # Indicates if the rate is fully refundable at the time of booking. Cancel penalties may still apply. Please refer to the cancel penalties section for reference.
    attr_accessor :refundable

    # Indicates if a \"Member Only Deal\" is available for this rate.
    attr_accessor :member_deal_available

    attr_accessor :sale_scenario

    # * `expedia` - Payment is taken by Expedia. * `property` - Payment is taken by the property. 
    attr_accessor :merchant_of_record

    # Room amenities.
    attr_accessor :amenities

    attr_accessor :links

    # A map of the room's bed groups.
    attr_accessor :bed_groups

    # Array of `cancel_penalty` objects containing cancel penalty information.
    attr_accessor :cancel_penalties

    # An array of stay date ranges within this check-in / check-out range that are not refundable. Stay dates within these ranges provide no refund on cancellation, regardless of cancel penalty windows. The stay dates are determined by the would be check-in of that night. With a check-in date of 2023-09-01, and a check-out date of 2023-09-06, this would be a 5 night stay. A `nonrefundable_date_range` with start: 2023-09-02 and end: 2023-09-03 would mean 2 of the nights are nonrefundable. The 1st night is refundable, the 2nd and 3rd nights are nonrefundable, and the 4th and 5th nights are refundable, subject to `cancel_penalties` restrictions. 
    attr_accessor :nonrefundable_date_ranges

    # An array of stay date ranges within this check-in / check-out range that have an incentive applied. The stay dates are determined by the would be check-in of that night. With a check-in date of 2023-09-01, and a check-out date of 2023-09-06, this would be a 5 night stay. A `marketing_fee_incentive` with start: 2023-09-02 and end: 2023-09-03 would mean 2 of the nights have an incentive applied. The 1st night is not part of the incentive, the 2nd and 3rd nights are part of the incentive, and the 4th and 5th nights are not part of the incentive. 
    attr_accessor :marketing_fee_incentives

    # A map of room information by occupancy.
    attr_accessor :occupancy_pricing

    attr_accessor :promotions

    attr_accessor :card_on_file_limit

    attr_accessor :refundable_damage_deposit

    # Array of deposits for the rate.
    attr_accessor :deposits

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'status' => :'status',
        :'available_rooms' => :'available_rooms',
        :'refundable' => :'refundable',
        :'member_deal_available' => :'member_deal_available',
        :'sale_scenario' => :'sale_scenario',
        :'merchant_of_record' => :'merchant_of_record',
        :'amenities' => :'amenities',
        :'links' => :'links',
        :'bed_groups' => :'bed_groups',
        :'cancel_penalties' => :'cancel_penalties',
        :'nonrefundable_date_ranges' => :'nonrefundable_date_ranges',
        :'marketing_fee_incentives' => :'marketing_fee_incentives',
        :'occupancy_pricing' => :'occupancy_pricing',
        :'promotions' => :'promotions',
        :'card_on_file_limit' => :'card_on_file_limit',
        :'refundable_damage_deposit' => :'refundable_damage_deposit',
        :'deposits' => :'deposits'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'status' => :'String',
        :'available_rooms' => :'Float',
        :'refundable' => :'Boolean',
        :'member_deal_available' => :'Boolean',
        :'sale_scenario' => :'GetAvailability200ResponseInnerRoomsInnerRatesInnerSaleScenario',
        :'merchant_of_record' => :'String',
        :'amenities' => :'Hash<String, GetPropertyContent200ResponseValueAmenitiesValue>',
        :'links' => :'GetAvailability200ResponseInnerRoomsInnerRatesInnerLinks',
        :'bed_groups' => :'Hash<String, GetAvailability200ResponseInnerRoomsInnerRatesInnerBedGroupsValue>',
        :'cancel_penalties' => :'Array<GetAvailability200ResponseInnerRoomsInnerRatesInnerCancelPenaltiesInner>',
        :'nonrefundable_date_ranges' => :'Array<GetAvailability200ResponseInnerRoomsInnerRatesInnerNonrefundableDateRangesInner>',
        :'marketing_fee_incentives' => :'Array<GetAvailability200ResponseInnerRoomsInnerRatesInnerMarketingFeeIncentivesInner>',
        :'occupancy_pricing' => :'Hash<String, GetAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValue>',
        :'promotions' => :'GetAvailability200ResponseInnerRoomsInnerRatesInnerPromotions',
        :'card_on_file_limit' => :'GetAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValueTotalsInclusiveBillableCurrency',
        :'refundable_damage_deposit' => :'GetAvailability200ResponseInnerRoomsInnerRatesInnerOccupancyPricingValueTotalsInclusiveBillableCurrency',
        :'deposits' => :'Array<GetAvailability200ResponseInnerRoomsInnerRatesInnerDepositsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ExpediaRapid::GetAvailability200ResponseInnerRoomsInnerRatesInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ExpediaRapid::GetAvailability200ResponseInnerRoomsInnerRatesInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'available_rooms')
        self.available_rooms = attributes[:'available_rooms']
      end

      if attributes.key?(:'refundable')
        self.refundable = attributes[:'refundable']
      end

      if attributes.key?(:'member_deal_available')
        self.member_deal_available = attributes[:'member_deal_available']
      end

      if attributes.key?(:'sale_scenario')
        self.sale_scenario = attributes[:'sale_scenario']
      end

      if attributes.key?(:'merchant_of_record')
        self.merchant_of_record = attributes[:'merchant_of_record']
      end

      if attributes.key?(:'amenities')
        if (value = attributes[:'amenities']).is_a?(Hash)
          self.amenities = value
        end
      end

      if attributes.key?(:'links')
        self.links = attributes[:'links']
      end

      if attributes.key?(:'bed_groups')
        if (value = attributes[:'bed_groups']).is_a?(Hash)
          self.bed_groups = value
        end
      end

      if attributes.key?(:'cancel_penalties')
        if (value = attributes[:'cancel_penalties']).is_a?(Array)
          self.cancel_penalties = value
        end
      end

      if attributes.key?(:'nonrefundable_date_ranges')
        if (value = attributes[:'nonrefundable_date_ranges']).is_a?(Array)
          self.nonrefundable_date_ranges = value
        end
      end

      if attributes.key?(:'marketing_fee_incentives')
        if (value = attributes[:'marketing_fee_incentives']).is_a?(Array)
          self.marketing_fee_incentives = value
        end
      end

      if attributes.key?(:'occupancy_pricing')
        if (value = attributes[:'occupancy_pricing']).is_a?(Hash)
          self.occupancy_pricing = value
        end
      end

      if attributes.key?(:'promotions')
        self.promotions = attributes[:'promotions']
      end

      if attributes.key?(:'card_on_file_limit')
        self.card_on_file_limit = attributes[:'card_on_file_limit']
      end

      if attributes.key?(:'refundable_damage_deposit')
        self.refundable_damage_deposit = attributes[:'refundable_damage_deposit']
      end

      if attributes.key?(:'deposits')
        if (value = attributes[:'deposits']).is_a?(Array)
          self.deposits = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["available", "price_changed", "sold_out"])
      return false unless status_validator.valid?(@status)
      merchant_of_record_validator = EnumAttributeValidator.new('String', ["expedia", "property"])
      return false unless merchant_of_record_validator.valid?(@merchant_of_record)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["available", "price_changed", "sold_out"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_of_record Object to be assigned
    def merchant_of_record=(merchant_of_record)
      validator = EnumAttributeValidator.new('String', ["expedia", "property"])
      unless validator.valid?(merchant_of_record)
        fail ArgumentError, "invalid value for \"merchant_of_record\", must be one of #{validator.allowable_values}."
      end
      @merchant_of_record = merchant_of_record
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          status == o.status &&
          available_rooms == o.available_rooms &&
          refundable == o.refundable &&
          member_deal_available == o.member_deal_available &&
          sale_scenario == o.sale_scenario &&
          merchant_of_record == o.merchant_of_record &&
          amenities == o.amenities &&
          links == o.links &&
          bed_groups == o.bed_groups &&
          cancel_penalties == o.cancel_penalties &&
          nonrefundable_date_ranges == o.nonrefundable_date_ranges &&
          marketing_fee_incentives == o.marketing_fee_incentives &&
          occupancy_pricing == o.occupancy_pricing &&
          promotions == o.promotions &&
          card_on_file_limit == o.card_on_file_limit &&
          refundable_damage_deposit == o.refundable_damage_deposit &&
          deposits == o.deposits
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, status, available_rooms, refundable, member_deal_available, sale_scenario, merchant_of_record, amenities, links, bed_groups, cancel_penalties, nonrefundable_date_ranges, marketing_fee_incentives, occupancy_pricing, promotions, card_on_file_limit, refundable_damage_deposit, deposits].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ExpediaRapid.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
