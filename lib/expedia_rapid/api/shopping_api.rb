=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module ExpediaRapid
  class ShoppingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get additional property room rates and availability
    # Returns additional rates on available room types, using the parameters of the previous call.  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. _Note_: If there are no available rooms, the response will be an empty array. * The `nightly` array includes each individual night's charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the `stay` rate array, which details charges applied to the entire stay (each check-in). 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param token [String] A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the &#x60;additional_rates&#x60; link from the shop response, or the &#x60;shop&#x60; link on a &#x60;sold_out&#x60; price check response. It is also provided from the &#x60;shop_for_change&#x60; link on an itinerary retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;no_availability&#x60; * &#x60;forbidden&#x60; 
    # @option opts [String] :checkin Check-in date, in ISO 8601 format (YYYY-MM-DD). This can be up to 365 days in the future. Some partner configurations may extend this up to 500 days.&lt;br&gt; Note: Only needed for hard change if desired check-in date is different than original booking. If specified must also specify &#x60;checkout&#x60;. 
    # @option opts [String] :checkout Check-out date, in ISO 8601 format (YYYY-MM-DD). Total length of stay cannot exceed 28 nights or 365 nights depending on Vacation Rental configurations.&lt;br&gt; Note: Only needed for hard change if desired check-out date is different than original booking. If specified must also specify &#x60;checkin&#x60;.&lt;br&gt; 
    # @option opts [Array<String>] :exclusion Single exclusion type. Send multiple instances of this parameter to request multiple exclusions.&lt;br&gt; Note: Optional parameter for use with hard change requests. &lt;br&gt; * &#x60;refundable_damage_deposit&#x60; - Excludes Rapid supplied Vrbo rates with refundable damage deposits from the response. * &#x60;card_on_file&#x60; - Excludes Rapid supplied Vrbo rates with card-on-file damage collection from the response. 
    # @option opts [Array<String>] :filter Single filter type. Send multiple instances of this parameter to request multiple filters.&lt;br&gt; Note: Optional parameter for use with hard change requests.&lt;br&gt; This parameter cannot be set to &#x60;property_collect&#x60; if the existing booking is &#x60;expedia_collect&#x60; and vice versa.&lt;br&gt; * &#x60;refundable&#x60; - Filters results to only show fully refundable rates. * &#x60;expedia_collect&#x60; - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * &#x60;property_collect&#x60; - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies. * &#x60;loyalty&#x60; - Filters results to only show rates that are eligible for loyalty points. 
    # @option opts [Array<String>] :include Modify the response by including types of responses that are not provided by default.&lt;br&gt; * &#x60;sale_scenario.mobile_promotion&#x60; - Enable the &#x60;mobile_promotion&#x60; flag under the &#x60;sale_scenario&#x60; section of the response. 
    # @option opts [Array<String>] :occupancy Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.&lt;br&gt; Format: &#x60;numberOfAdults[-firstChildAge[,nextChildAge]]&#x60;&lt;br&gt; To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.&lt;br&gt; Note: Only needed for hard change if desired occupancy is different than original booking.&lt;br&gt; Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by &#x60;occupancy&#x3D;2-9,4&#x60;.&lt;br&gt; * A multi-room request to lodge an additional 2 adults would be represented by &#x60;occupancy&#x3D;2-9,4&amp;occupancy&#x3D;2&#x60; 
    # @option opts [Array<String>] :rate_option Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Note: Optional parameter for use with hard change requests.&lt;br&gt; Accepted values:&lt;br&gt; * &#x60;member&#x60; - Return member rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * &#x60;net_rates&#x60; - Return net rates for each property. This feature must be enabled to request these rates. * &#x60;cross_sell&#x60; - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel. 
    # @option opts [String] :sales_channel Provide the sales channel if you wish to override the sales_channel provided in the previous call. EPS dynamically provides the best content for optimal conversion on each sales channel.&lt;br&gt; Note: Must specify this value for hard change requests.&lt;br&gt; * &#x60;website&#x60; - Standard website accessed from the customer&#39;s computer * &#x60;agent_tool&#x60; - Your own agent tool used by your call center or retail store agent * &#x60;mobile_app&#x60; - An application installed on a phone or tablet device * &#x60;mobile_web&#x60; - A web browser application on a phone or tablet device * &#x60;meta&#x60; - Rates will be passed to and displayed on a 3rd party comparison website * &#x60;cache&#x60; - Rates will be used to populate a local cache 
    # @option opts [String] :currency Determines the returned currency type throughout the response &lt;br&gt; Note: This parameter is only valid for hard change requests and is ignored in all other cases 
    # @return [Array<GetAvailability200ResponseInner>]
    def get_additional_availability(accept, accept_encoding, user_agent, property_id, token, opts = {})
      data, _status_code, _headers = get_additional_availability_with_http_info(accept, accept_encoding, user_agent, property_id, token, opts)
      data
    end

    # Get additional property room rates and availability
    # Returns additional rates on available room types, using the parameters of the previous call.  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. _Note_: If there are no available rooms, the response will be an empty array. * The &#x60;nightly&#x60; array includes each individual night&#39;s charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the &#x60;stay&#x60; rate array, which details charges applied to the entire stay (each check-in). 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param token [String] A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the &#x60;additional_rates&#x60; link from the shop response, or the &#x60;shop&#x60; link on a &#x60;sold_out&#x60; price check response. It is also provided from the &#x60;shop_for_change&#x60; link on an itinerary retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;no_availability&#x60; * &#x60;forbidden&#x60; 
    # @option opts [String] :checkin Check-in date, in ISO 8601 format (YYYY-MM-DD). This can be up to 365 days in the future. Some partner configurations may extend this up to 500 days.&lt;br&gt; Note: Only needed for hard change if desired check-in date is different than original booking. If specified must also specify &#x60;checkout&#x60;. 
    # @option opts [String] :checkout Check-out date, in ISO 8601 format (YYYY-MM-DD). Total length of stay cannot exceed 28 nights or 365 nights depending on Vacation Rental configurations.&lt;br&gt; Note: Only needed for hard change if desired check-out date is different than original booking. If specified must also specify &#x60;checkin&#x60;.&lt;br&gt; 
    # @option opts [Array<String>] :exclusion Single exclusion type. Send multiple instances of this parameter to request multiple exclusions.&lt;br&gt; Note: Optional parameter for use with hard change requests. &lt;br&gt; * &#x60;refundable_damage_deposit&#x60; - Excludes Rapid supplied Vrbo rates with refundable damage deposits from the response. * &#x60;card_on_file&#x60; - Excludes Rapid supplied Vrbo rates with card-on-file damage collection from the response. 
    # @option opts [Array<String>] :filter Single filter type. Send multiple instances of this parameter to request multiple filters.&lt;br&gt; Note: Optional parameter for use with hard change requests.&lt;br&gt; This parameter cannot be set to &#x60;property_collect&#x60; if the existing booking is &#x60;expedia_collect&#x60; and vice versa.&lt;br&gt; * &#x60;refundable&#x60; - Filters results to only show fully refundable rates. * &#x60;expedia_collect&#x60; - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * &#x60;property_collect&#x60; - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies. * &#x60;loyalty&#x60; - Filters results to only show rates that are eligible for loyalty points. 
    # @option opts [Array<String>] :include Modify the response by including types of responses that are not provided by default.&lt;br&gt; * &#x60;sale_scenario.mobile_promotion&#x60; - Enable the &#x60;mobile_promotion&#x60; flag under the &#x60;sale_scenario&#x60; section of the response. 
    # @option opts [Array<String>] :occupancy Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.&lt;br&gt; Format: &#x60;numberOfAdults[-firstChildAge[,nextChildAge]]&#x60;&lt;br&gt; To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.&lt;br&gt; Note: Only needed for hard change if desired occupancy is different than original booking.&lt;br&gt; Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by &#x60;occupancy&#x3D;2-9,4&#x60;.&lt;br&gt; * A multi-room request to lodge an additional 2 adults would be represented by &#x60;occupancy&#x3D;2-9,4&amp;occupancy&#x3D;2&#x60; 
    # @option opts [Array<String>] :rate_option Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Note: Optional parameter for use with hard change requests.&lt;br&gt; Accepted values:&lt;br&gt; * &#x60;member&#x60; - Return member rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * &#x60;net_rates&#x60; - Return net rates for each property. This feature must be enabled to request these rates. * &#x60;cross_sell&#x60; - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel. 
    # @option opts [String] :sales_channel Provide the sales channel if you wish to override the sales_channel provided in the previous call. EPS dynamically provides the best content for optimal conversion on each sales channel.&lt;br&gt; Note: Must specify this value for hard change requests.&lt;br&gt; * &#x60;website&#x60; - Standard website accessed from the customer&#39;s computer * &#x60;agent_tool&#x60; - Your own agent tool used by your call center or retail store agent * &#x60;mobile_app&#x60; - An application installed on a phone or tablet device * &#x60;mobile_web&#x60; - A web browser application on a phone or tablet device * &#x60;meta&#x60; - Rates will be passed to and displayed on a 3rd party comparison website * &#x60;cache&#x60; - Rates will be used to populate a local cache 
    # @option opts [String] :currency Determines the returned currency type throughout the response &lt;br&gt; Note: This parameter is only valid for hard change requests and is ignored in all other cases 
    # @return [Array<(Array<GetAvailability200ResponseInner>, Integer, Hash)>] Array<GetAvailability200ResponseInner> data, response status code and response headers
    def get_additional_availability_with_http_info(accept, accept_encoding, user_agent, property_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShoppingApi.get_additional_availability ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling ShoppingApi.get_additional_availability"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ShoppingApi.get_additional_availability"
      end
      # verify the required parameter 'user_agent' is set
      if @api_client.config.client_side_validation && user_agent.nil?
        fail ArgumentError, "Missing the required parameter 'user_agent' when calling ShoppingApi.get_additional_availability"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ShoppingApi.get_additional_availability"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ShoppingApi.get_additional_availability"
      end
      allowable_values = ["standard", "service_unavailable", "unknown_internal_error", "no_availability", "forbidden"]
      if @api_client.config.client_side_validation && opts[:'test'] && !allowable_values.include?(opts[:'test'])
        fail ArgumentError, "invalid value for \"test\", must be one of #{allowable_values}"
      end
      allowable_values = ["refundable_damage_deposit", "card_on_file"]
      if @api_client.config.client_side_validation && opts[:'exclusion'] && !opts[:'exclusion'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"exclusion\", must include one of #{allowable_values}"
      end
      allowable_values = ["refundable", "expedia_collect", "property_collect"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !opts[:'filter'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"filter\", must include one of #{allowable_values}"
      end
      allowable_values = ["sale_scenario.mobile_promotion"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      allowable_values = ["member", "net_rates", "cross_sell"]
      if @api_client.config.client_side_validation && opts[:'rate_option'] && !opts[:'rate_option'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"rate_option\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/properties/{property_id}/availability'.sub('{' + 'property_id' + '}', CGI.escape(property_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'checkin'] = opts[:'checkin'] if !opts[:'checkin'].nil?
      query_params[:'checkout'] = opts[:'checkout'] if !opts[:'checkout'].nil?
      query_params[:'exclusion'] = @api_client.build_collection_param(opts[:'exclusion'], :multi) if !opts[:'exclusion'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :multi) if !opts[:'filter'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'occupancy'] = @api_client.build_collection_param(opts[:'occupancy'], :multi) if !opts[:'occupancy'].nil?
      query_params[:'rate_option'] = @api_client.build_collection_param(opts[:'rate_option'], :multi) if !opts[:'rate_option'].nil?
      query_params[:'sales_channel'] = opts[:'sales_channel'] if !opts[:'sales_channel'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Accept'] = accept
      header_params[:'Accept-Encoding'] = accept_encoding
      header_params[:'User-Agent'] = user_agent
      header_params[:'Customer-Ip'] = opts[:'customer_ip'] if !opts[:'customer_ip'].nil?
      header_params[:'Customer-Session-Id'] = opts[:'customer_session_id'] if !opts[:'customer_session_id'].nil?
      header_params[:'Test'] = opts[:'test'] if !opts[:'test'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetAvailability200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"ShoppingApi.get_additional_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShoppingApi#get_additional_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get property room rates and availability
    # Returns rates on available room types for specified properties (maximum of 250 properties per request).  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. _Note_: If there are no available rooms, the response will be an empty array. * Multiple rooms of the same type may be requested by including multiple instances of the `occupancy` parameter. * The `nightly` array includes each individual night's charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the `stay` rate array, which details charges applied to the entire stay (each check-in). 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param checkin [String] Check-in date, in ISO 8601 format (YYYY-MM-DD). This can be up to 365 days in the future. Some partner configurations may extend this up to 500 days. 
    # @param checkout [String] Check-out date, in ISO 8601 format (YYYY-MM-DD). Total length of stay cannot exceed 28 nights or 365 nights depending on Vacation Rental configurations. 
    # @param currency [String] Requested currency for the rates, in ISO 4217 format&lt;br&gt;&lt;br&gt; Currency Options: [https://developers.expediagroup.com/docs/rapid/resources/reference/currency-options](https://developers.expediagroup.com/docs/rapid/resources/reference/currency-options) 
    # @param country_code [String] The country code of the traveler&#39;s point of sale, in ISO 3166-1 alpha-2 format. This should represent the country where the shopping transaction is taking place.&lt;br&gt; For more information see: [https://www.iso.org/obp/ui/#search/code/](https://www.iso.org/obp/ui/#search/code/) 
    # @param language [String] Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO 639-1 alpha-2 language codes and ISO 3166-1 alpha-2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)&lt;br&gt; Language Options: [https://developers.expediagroup.com/docs/rapid/resources/reference/language-options](https://developers.expediagroup.com/docs/rapid/resources/reference/language-options) 
    # @param occupancy [Array<String>] Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.&lt;br&gt; Format: &#x60;numberOfAdults[-firstChildAge[,nextChildAge]]&#x60;&lt;br&gt; To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.&lt;br&gt; Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by &#x60;occupancy&#x3D;2-9,4&#x60;.&lt;br&gt; * A multi-room request to lodge an additional 2 adults would be represented by &#x60;occupancy&#x3D;2-9,4&amp;occupancy&#x3D;2&#x60; 
    # @param property_id [Array<String>] The ID of the property you want to search for. You can provide 1 to 250 property_id parameters. 
    # @param rate_plan_count [Integer] The number of rates to return per property. The rates with the best value will be returned, e.g. a rate_plan_count&#x3D;4 will return the best 4 rates, but the rates are not ordered from lowest to highest or vice versa in the response. Generally lowest rates will be prioritized.&lt;br&gt;&lt;br&gt; The value must be between 1 and 250. 
    # @param sales_channel [String] You must provide the sales channel for the display of rates. EPS dynamically provides the best content for optimal conversion on each sales channel. If you have a sales channel that is not currently supported in this list, please contact our support team.&lt;br&gt; * &#x60;website&#x60; - Standard website accessed from the customer&#39;s computer * &#x60;agent_tool&#x60; - Your own agent tool used by your call center or retail store agent * &#x60;mobile_app&#x60; - An application installed on a phone or tablet device * &#x60;mobile_web&#x60; - A web browser application on a phone or tablet device * &#x60;meta&#x60; - Rates will be passed to and displayed on a 3rd party comparison website * &#x60;cache&#x60; - Rates will be used to populate a local cache 
    # @param sales_environment [String] You must provide the sales environment in which rates will be sold. EPS dynamically provides the best content for optimal conversion. If you have a sales environment that is not currently supported in this list, please contact our support team.&lt;br&gt; * &#x60;hotel_package&#x60; - Use when selling the hotel with a transport product, e.g. flight &amp; hotel. * &#x60;hotel_only&#x60; - Use when selling the hotel as an individual product. * &#x60;loyalty&#x60; - Use when you are selling the hotel as part of a loyalty program and the price is converted to points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; 
    # @option opts [Array<String>] :amenity_category Single amenity category. Send multiple instances of this parameter to request rates that match multiple amenity categories.&lt;br&gt; See the Amenity Categories section of the [Content Reference Lists](https://developers.expediagroup.com/docs/rapid/lodging/content/content-reference-lists) for a list of values. 
    # @option opts [Array<String>] :exclusion Single exclusion type. Send multiple instances of this parameter to request multiple exclusions.&lt;br&gt; * &#x60;refundable_damage_deposit&#x60; - Excludes Rapid supplied Vrbo rates with refundable damage deposits from the response. * &#x60;card_on_file&#x60; - Excludes Rapid supplied Vrbo rates with card-on-file damage collection from the response. 
    # @option opts [Array<String>] :filter Single filter type. Send multiple instances of this parameter to request multiple filters.&lt;br&gt; * &#x60;refundable&#x60; - Filters results to only show fully refundable rates. * &#x60;expedia_collect&#x60; - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * &#x60;property_collect&#x60; - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies. * &#x60;loyalty&#x60; - Filters results to only show rates that are eligible for loyalty points. 
    # @option opts [Array<String>] :include Modify the response by including types of responses that are not provided by default.&lt;br&gt; * &#x60;unavailable_reason&#x60; - When a property is unavailable for an actionable reason, return a response with that reason - See [Unavailable Reason Codes](https://developers.expediagroup.com/docs/rapid/resources/reference/unavailable-reason-codes) for possible values. * &#x60;sale_scenario.mobile_promotion&#x60; - Enable the &#x60;mobile_promotion&#x60; flag under the &#x60;room.rate.sale_scenario&#x60; section of the response. * &#x60;rooms.rates.marketing_fee_incentives&#x60; - When a rate has a marketing fee incentive applied, the response will include the &#x60;marketing_fee_incentives&#x60; array if this flag is provided in the request. 
    # @option opts [Array<String>] :rate_option Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Accepted values:&lt;br&gt; * &#x60;member&#x60; - Return member rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * &#x60;net_rates&#x60; - Return net rates for each property. This feature must be enabled to request these rates. * &#x60;cross_sell&#x60; - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel. 
    # @option opts [String] :travel_purpose This parameter is to specify the travel purpose of the booking. This may impact available rate plans, pricing, or tax calculations. * &#x60;leisure&#x60; * &#x60;business&#x60; 
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [Array<GetAvailability200ResponseInner>]
    def get_availability(accept, accept_encoding, user_agent, checkin, checkout, currency, country_code, language, occupancy, property_id, rate_plan_count, sales_channel, sales_environment, opts = {})
      data, _status_code, _headers = get_availability_with_http_info(accept, accept_encoding, user_agent, checkin, checkout, currency, country_code, language, occupancy, property_id, rate_plan_count, sales_channel, sales_environment, opts)
      data
    end

    # Get property room rates and availability
    # Returns rates on available room types for specified properties (maximum of 250 properties per request).  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. _Note_: If there are no available rooms, the response will be an empty array. * Multiple rooms of the same type may be requested by including multiple instances of the &#x60;occupancy&#x60; parameter. * The &#x60;nightly&#x60; array includes each individual night&#39;s charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the &#x60;stay&#x60; rate array, which details charges applied to the entire stay (each check-in). 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param checkin [String] Check-in date, in ISO 8601 format (YYYY-MM-DD). This can be up to 365 days in the future. Some partner configurations may extend this up to 500 days. 
    # @param checkout [String] Check-out date, in ISO 8601 format (YYYY-MM-DD). Total length of stay cannot exceed 28 nights or 365 nights depending on Vacation Rental configurations. 
    # @param currency [String] Requested currency for the rates, in ISO 4217 format&lt;br&gt;&lt;br&gt; Currency Options: [https://developers.expediagroup.com/docs/rapid/resources/reference/currency-options](https://developers.expediagroup.com/docs/rapid/resources/reference/currency-options) 
    # @param country_code [String] The country code of the traveler&#39;s point of sale, in ISO 3166-1 alpha-2 format. This should represent the country where the shopping transaction is taking place.&lt;br&gt; For more information see: [https://www.iso.org/obp/ui/#search/code/](https://www.iso.org/obp/ui/#search/code/) 
    # @param language [String] Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO 639-1 alpha-2 language codes and ISO 3166-1 alpha-2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)&lt;br&gt; Language Options: [https://developers.expediagroup.com/docs/rapid/resources/reference/language-options](https://developers.expediagroup.com/docs/rapid/resources/reference/language-options) 
    # @param occupancy [Array<String>] Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.&lt;br&gt; Format: &#x60;numberOfAdults[-firstChildAge[,nextChildAge]]&#x60;&lt;br&gt; To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.&lt;br&gt; Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by &#x60;occupancy&#x3D;2-9,4&#x60;.&lt;br&gt; * A multi-room request to lodge an additional 2 adults would be represented by &#x60;occupancy&#x3D;2-9,4&amp;occupancy&#x3D;2&#x60; 
    # @param property_id [Array<String>] The ID of the property you want to search for. You can provide 1 to 250 property_id parameters. 
    # @param rate_plan_count [Integer] The number of rates to return per property. The rates with the best value will be returned, e.g. a rate_plan_count&#x3D;4 will return the best 4 rates, but the rates are not ordered from lowest to highest or vice versa in the response. Generally lowest rates will be prioritized.&lt;br&gt;&lt;br&gt; The value must be between 1 and 250. 
    # @param sales_channel [String] You must provide the sales channel for the display of rates. EPS dynamically provides the best content for optimal conversion on each sales channel. If you have a sales channel that is not currently supported in this list, please contact our support team.&lt;br&gt; * &#x60;website&#x60; - Standard website accessed from the customer&#39;s computer * &#x60;agent_tool&#x60; - Your own agent tool used by your call center or retail store agent * &#x60;mobile_app&#x60; - An application installed on a phone or tablet device * &#x60;mobile_web&#x60; - A web browser application on a phone or tablet device * &#x60;meta&#x60; - Rates will be passed to and displayed on a 3rd party comparison website * &#x60;cache&#x60; - Rates will be used to populate a local cache 
    # @param sales_environment [String] You must provide the sales environment in which rates will be sold. EPS dynamically provides the best content for optimal conversion. If you have a sales environment that is not currently supported in this list, please contact our support team.&lt;br&gt; * &#x60;hotel_package&#x60; - Use when selling the hotel with a transport product, e.g. flight &amp; hotel. * &#x60;hotel_only&#x60; - Use when selling the hotel as an individual product. * &#x60;loyalty&#x60; - Use when you are selling the hotel as part of a loyalty program and the price is converted to points. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; 
    # @option opts [Array<String>] :amenity_category Single amenity category. Send multiple instances of this parameter to request rates that match multiple amenity categories.&lt;br&gt; See the Amenity Categories section of the [Content Reference Lists](https://developers.expediagroup.com/docs/rapid/lodging/content/content-reference-lists) for a list of values. 
    # @option opts [Array<String>] :exclusion Single exclusion type. Send multiple instances of this parameter to request multiple exclusions.&lt;br&gt; * &#x60;refundable_damage_deposit&#x60; - Excludes Rapid supplied Vrbo rates with refundable damage deposits from the response. * &#x60;card_on_file&#x60; - Excludes Rapid supplied Vrbo rates with card-on-file damage collection from the response. 
    # @option opts [Array<String>] :filter Single filter type. Send multiple instances of this parameter to request multiple filters.&lt;br&gt; * &#x60;refundable&#x60; - Filters results to only show fully refundable rates. * &#x60;expedia_collect&#x60; - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * &#x60;property_collect&#x60; - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies. * &#x60;loyalty&#x60; - Filters results to only show rates that are eligible for loyalty points. 
    # @option opts [Array<String>] :include Modify the response by including types of responses that are not provided by default.&lt;br&gt; * &#x60;unavailable_reason&#x60; - When a property is unavailable for an actionable reason, return a response with that reason - See [Unavailable Reason Codes](https://developers.expediagroup.com/docs/rapid/resources/reference/unavailable-reason-codes) for possible values. * &#x60;sale_scenario.mobile_promotion&#x60; - Enable the &#x60;mobile_promotion&#x60; flag under the &#x60;room.rate.sale_scenario&#x60; section of the response. * &#x60;rooms.rates.marketing_fee_incentives&#x60; - When a rate has a marketing fee incentive applied, the response will include the &#x60;marketing_fee_incentives&#x60; array if this flag is provided in the request. 
    # @option opts [Array<String>] :rate_option Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Accepted values:&lt;br&gt; * &#x60;member&#x60; - Return member rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * &#x60;net_rates&#x60; - Return net rates for each property. This feature must be enabled to request these rates. * &#x60;cross_sell&#x60; - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel. 
    # @option opts [String] :travel_purpose This parameter is to specify the travel purpose of the booking. This may impact available rate plans, pricing, or tax calculations. * &#x60;leisure&#x60; * &#x60;business&#x60; 
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [Array<(Array<GetAvailability200ResponseInner>, Integer, Hash)>] Array<GetAvailability200ResponseInner> data, response status code and response headers
    def get_availability_with_http_info(accept, accept_encoding, user_agent, checkin, checkout, currency, country_code, language, occupancy, property_id, rate_plan_count, sales_channel, sales_environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShoppingApi.get_availability ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'user_agent' is set
      if @api_client.config.client_side_validation && user_agent.nil?
        fail ArgumentError, "Missing the required parameter 'user_agent' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'checkin' is set
      if @api_client.config.client_side_validation && checkin.nil?
        fail ArgumentError, "Missing the required parameter 'checkin' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'checkout' is set
      if @api_client.config.client_side_validation && checkout.nil?
        fail ArgumentError, "Missing the required parameter 'checkout' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'currency' is set
      if @api_client.config.client_side_validation && currency.nil?
        fail ArgumentError, "Missing the required parameter 'currency' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'occupancy' is set
      if @api_client.config.client_side_validation && occupancy.nil?
        fail ArgumentError, "Missing the required parameter 'occupancy' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'rate_plan_count' is set
      if @api_client.config.client_side_validation && rate_plan_count.nil?
        fail ArgumentError, "Missing the required parameter 'rate_plan_count' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'sales_channel' is set
      if @api_client.config.client_side_validation && sales_channel.nil?
        fail ArgumentError, "Missing the required parameter 'sales_channel' when calling ShoppingApi.get_availability"
      end
      # verify the required parameter 'sales_environment' is set
      if @api_client.config.client_side_validation && sales_environment.nil?
        fail ArgumentError, "Missing the required parameter 'sales_environment' when calling ShoppingApi.get_availability"
      end
      allowable_values = ["standard", "service_unavailable", "unknown_internal_error"]
      if @api_client.config.client_side_validation && opts[:'test'] && !allowable_values.include?(opts[:'test'])
        fail ArgumentError, "invalid value for \"test\", must be one of #{allowable_values}"
      end
      allowable_values = ["refundable_damage_deposit", "card_on_file"]
      if @api_client.config.client_side_validation && opts[:'exclusion'] && !opts[:'exclusion'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"exclusion\", must include one of #{allowable_values}"
      end
      allowable_values = ["refundable", "expedia_collect", "property_collect"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !opts[:'filter'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"filter\", must include one of #{allowable_values}"
      end
      allowable_values = ["unavailable_reason", "sale_scenario.mobile_promotion", "rooms.rates.marketing_fee_incentives"]
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"include\", must include one of #{allowable_values}"
      end
      allowable_values = ["member", "net_rates", "cross_sell"]
      if @api_client.config.client_side_validation && opts[:'rate_option'] && !opts[:'rate_option'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"rate_option\", must include one of #{allowable_values}"
      end
      allowable_values = ["leisure", "business"]
      if @api_client.config.client_side_validation && opts[:'travel_purpose'] && !allowable_values.include?(opts[:'travel_purpose'])
        fail ArgumentError, "invalid value for \"travel_purpose\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/properties/availability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'checkin'] = checkin
      query_params[:'checkout'] = checkout
      query_params[:'currency'] = currency
      query_params[:'country_code'] = country_code
      query_params[:'language'] = language
      query_params[:'occupancy'] = @api_client.build_collection_param(occupancy, :multi)
      query_params[:'property_id'] = @api_client.build_collection_param(property_id, :multi)
      query_params[:'rate_plan_count'] = rate_plan_count
      query_params[:'sales_channel'] = sales_channel
      query_params[:'sales_environment'] = sales_environment
      query_params[:'amenity_category'] = @api_client.build_collection_param(opts[:'amenity_category'], :multi) if !opts[:'amenity_category'].nil?
      query_params[:'exclusion'] = @api_client.build_collection_param(opts[:'exclusion'], :multi) if !opts[:'exclusion'].nil?
      query_params[:'filter'] = @api_client.build_collection_param(opts[:'filter'], :multi) if !opts[:'filter'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'rate_option'] = @api_client.build_collection_param(opts[:'rate_option'], :multi) if !opts[:'rate_option'].nil?
      query_params[:'travel_purpose'] = opts[:'travel_purpose'] if !opts[:'travel_purpose'].nil?
      query_params[:'billing_terms'] = opts[:'billing_terms'] if !opts[:'billing_terms'].nil?
      query_params[:'partner_point_of_sale'] = opts[:'partner_point_of_sale'] if !opts[:'partner_point_of_sale'].nil?
      query_params[:'payment_terms'] = opts[:'payment_terms'] if !opts[:'payment_terms'].nil?
      query_params[:'platform_name'] = opts[:'platform_name'] if !opts[:'platform_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Accept'] = accept
      header_params[:'Accept-Encoding'] = accept_encoding
      header_params[:'User-Agent'] = user_agent
      header_params[:'Customer-Ip'] = opts[:'customer_ip'] if !opts[:'customer_ip'].nil?
      header_params[:'Customer-Session-Id'] = opts[:'customer_session_id'] if !opts[:'customer_session_id'].nil?
      header_params[:'Test'] = opts[:'test'] if !opts[:'test'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetAvailability200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"ShoppingApi.get_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShoppingApi#get_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a calendar of availability dates for properties. This is currently a Vrbo property only feature.
    # Returns availability information for the specified properties (maximum of 25 properties per request).  The response includes per day information about the property's availability, information about if check-in or check-out is available for the day,   and information regarding the stay constraints. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param authorization [String] The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details.
    # @param property_id [Array<String>] The ID of the property you want to search for. You can provide 1 to 250 property_id parameters. 
    # @param start_date [Date] The first day of availability information to be returned, in ISO 8601 format (YYYY-MM-DD), up to 500 days in the future from the current date. 
    # @param end_date [Date] The last day of availability information to be returned, in ISO 8601 format (YYYY-MM-DD). This must be 365 days or less from the start_date. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords: * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; 
    # @return [Array<GetCalendarAvailability200ResponseInner>]
    def get_calendar_availability(accept, accept_encoding, user_agent, authorization, property_id, start_date, end_date, opts = {})
      data, _status_code, _headers = get_calendar_availability_with_http_info(accept, accept_encoding, user_agent, authorization, property_id, start_date, end_date, opts)
      data
    end

    # Get a calendar of availability dates for properties. This is currently a Vrbo property only feature.
    # Returns availability information for the specified properties (maximum of 25 properties per request).  The response includes per day information about the property&#39;s availability, information about if check-in or check-out is available for the day,   and information regarding the stay constraints. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param authorization [String] The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details.
    # @param property_id [Array<String>] The ID of the property you want to search for. You can provide 1 to 250 property_id parameters. 
    # @param start_date [Date] The first day of availability information to be returned, in ISO 8601 format (YYYY-MM-DD), up to 500 days in the future from the current date. 
    # @param end_date [Date] The last day of availability information to be returned, in ISO 8601 format (YYYY-MM-DD). This must be 365 days or less from the start_date. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :test Shop calls have a test header that can be used to return set responses with the following keywords: * &#x60;standard&#x60; * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; 
    # @return [Array<(Array<GetCalendarAvailability200ResponseInner>, Integer, Hash)>] Array<GetCalendarAvailability200ResponseInner> data, response status code and response headers
    def get_calendar_availability_with_http_info(accept, accept_encoding, user_agent, authorization, property_id, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShoppingApi.get_calendar_availability ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'user_agent' is set
      if @api_client.config.client_side_validation && user_agent.nil?
        fail ArgumentError, "Missing the required parameter 'user_agent' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ShoppingApi.get_calendar_availability"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ShoppingApi.get_calendar_availability"
      end
      allowable_values = ["standard", "service_unavailable", "unknown_internal_error"]
      if @api_client.config.client_side_validation && opts[:'test'] && !allowable_values.include?(opts[:'test'])
        fail ArgumentError, "invalid value for \"test\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/calendars/availability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'property_id'] = @api_client.build_collection_param(property_id, :multi)
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Accept'] = accept
      header_params[:'Accept-Encoding'] = accept_encoding
      header_params[:'User-Agent'] = user_agent
      header_params[:'Authorization'] = authorization
      header_params[:'Test'] = opts[:'test'] if !opts[:'test'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCalendarAvailability200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"ShoppingApi.get_calendar_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShoppingApi#get_calendar_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Accepted Payment Types - EPS MOR Only
    # Returns the accepted payment options.  Use this API to power your checkout page and display valid forms of payment, ensuring a smooth booking. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param token [String] Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @return [GetPaymentOptions200Response]
    def get_payment_options(accept, accept_encoding, user_agent, property_id, token, opts = {})
      data, _status_code, _headers = get_payment_options_with_http_info(accept, accept_encoding, user_agent, property_id, token, opts)
      data
    end

    # Get Accepted Payment Types - EPS MOR Only
    # Returns the accepted payment options.  Use this API to power your checkout page and display valid forms of payment, ensuring a smooth booking. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param token [String] Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @return [Array<(GetPaymentOptions200Response, Integer, Hash)>] GetPaymentOptions200Response data, response status code and response headers
    def get_payment_options_with_http_info(accept, accept_encoding, user_agent, property_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShoppingApi.get_payment_options ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling ShoppingApi.get_payment_options"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ShoppingApi.get_payment_options"
      end
      # verify the required parameter 'user_agent' is set
      if @api_client.config.client_side_validation && user_agent.nil?
        fail ArgumentError, "Missing the required parameter 'user_agent' when calling ShoppingApi.get_payment_options"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ShoppingApi.get_payment_options"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ShoppingApi.get_payment_options"
      end
      # resource path
      local_var_path = '/properties/{property_id}/payment-options'.sub('{' + 'property_id' + '}', CGI.escape(property_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Accept'] = accept
      header_params[:'Accept-Encoding'] = accept_encoding
      header_params[:'User-Agent'] = user_agent
      header_params[:'Customer-Ip'] = opts[:'customer_ip'] if !opts[:'customer_ip'].nil?
      header_params[:'Customer-Session-Id'] = opts[:'customer_session_id'] if !opts[:'customer_session_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPaymentOptions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"ShoppingApi.get_payment_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShoppingApi#get_payment_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price-Check
    # Confirms the price returned by the Property Availability response. Use this API to verify a previously-selected rate is still valid before booking. If the price is matched, the response returns a link to request a booking. If the price has changed, the response returns new price details and a booking link for the new price. If the rate is no longer available, the response will return a new Property Availability request link to search again for different rates. In the event of a price change, go back to Property Availability and book the property at the new price or return to additional rates for the property. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param room_id [String] Room ID of a property.&lt;br&gt; 
    # @param rate_id [String] Rate ID of a room.&lt;br&gt; 
    # @param token [String] A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the price check link from the shop response.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Price check calls have a test header that can be used to return set responses with the following keywords:   * &#x60;available&#x60;   * &#x60;price_changed&#x60;   * &#x60;sold_out&#x60;   * &#x60;service_unavailable&#x60;   * &#x60;unknown_internal_error&#x60; 
    # @return [PriceCheck200Response]
    def price_check(accept, accept_encoding, user_agent, property_id, room_id, rate_id, token, opts = {})
      data, _status_code, _headers = price_check_with_http_info(accept, accept_encoding, user_agent, property_id, room_id, rate_id, token, opts)
      data
    end

    # Price-Check
    # Confirms the price returned by the Property Availability response. Use this API to verify a previously-selected rate is still valid before booking. If the price is matched, the response returns a link to request a booking. If the price has changed, the response returns new price details and a booking link for the new price. If the rate is no longer available, the response will return a new Property Availability request link to search again for different rates. In the event of a price change, go back to Property Availability and book the property at the new price or return to additional rates for the property. 
    # @param accept [String] Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. 
    # @param accept_encoding [String] Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. 
    # @param user_agent [String] The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. 
    # @param property_id [String] Expedia Property ID.&lt;br&gt; 
    # @param room_id [String] Room ID of a property.&lt;br&gt; 
    # @param rate_id [String] Rate ID of a room.&lt;br&gt; 
    # @param token [String] A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the price check link from the shop response.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. 
    # @option opts [String] :customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. 
    # @option opts [String] :test Price check calls have a test header that can be used to return set responses with the following keywords:   * &#x60;available&#x60;   * &#x60;price_changed&#x60;   * &#x60;sold_out&#x60;   * &#x60;service_unavailable&#x60;   * &#x60;unknown_internal_error&#x60; 
    # @return [Array<(PriceCheck200Response, Integer, Hash)>] PriceCheck200Response data, response status code and response headers
    def price_check_with_http_info(accept, accept_encoding, user_agent, property_id, room_id, rate_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShoppingApi.price_check ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'user_agent' is set
      if @api_client.config.client_side_validation && user_agent.nil?
        fail ArgumentError, "Missing the required parameter 'user_agent' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'rate_id' is set
      if @api_client.config.client_side_validation && rate_id.nil?
        fail ArgumentError, "Missing the required parameter 'rate_id' when calling ShoppingApi.price_check"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ShoppingApi.price_check"
      end
      allowable_values = ["available", "price_changed", "sold_out", "service_unavailable", "unknown_internal_error"]
      if @api_client.config.client_side_validation && opts[:'test'] && !allowable_values.include?(opts[:'test'])
        fail ArgumentError, "invalid value for \"test\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/properties/{property_id}/rooms/{room_id}/rates/{rate_id}'.sub('{' + 'property_id' + '}', CGI.escape(property_id.to_s)).sub('{' + 'room_id' + '}', CGI.escape(room_id.to_s)).sub('{' + 'rate_id' + '}', CGI.escape(rate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Accept'] = accept
      header_params[:'Accept-Encoding'] = accept_encoding
      header_params[:'User-Agent'] = user_agent
      header_params[:'Customer-Ip'] = opts[:'customer_ip'] if !opts[:'customer_ip'].nil?
      header_params[:'Customer-Session-Id'] = opts[:'customer_session_id'] if !opts[:'customer_session_id'].nil?
      header_params[:'Test'] = opts[:'test'] if !opts[:'test'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PriceCheck200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"ShoppingApi.price_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShoppingApi#price_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
