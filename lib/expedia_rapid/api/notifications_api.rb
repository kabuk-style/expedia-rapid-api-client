=begin
#Rapid

#EPS Rapid V3

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module ExpediaRapid
  class NotificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Request Test Notification
    # This request triggers a test notification according to the specified event_type. All event types supported by the Notifications API are available to test. 
    # @param request_test_notification_request [RequestTestNotificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [nil]
    def request_test_notification(request_test_notification_request, opts = {})
      request_test_notification_with_http_info(request_test_notification_request, opts)
      nil
    end

    # Request Test Notification
    # This request triggers a test notification according to the specified event_type. All event types supported by the Notifications API are available to test. 
    # @param request_test_notification_request [RequestTestNotificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def request_test_notification_with_http_info(request_test_notification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.request_test_notification ...'
      end
      # verify the required parameter 'request_test_notification_request' is set
      if @api_client.config.client_side_validation && request_test_notification_request.nil?
        fail ArgumentError, "Missing the required parameter 'request_test_notification_request' when calling NotificationsApi.request_test_notification"
      end
      # resource path
      local_var_path = '/notifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'billing_terms'] = opts[:'billing_terms'] if !opts[:'billing_terms'].nil?
      query_params[:'partner_point_of_sale'] = opts[:'partner_point_of_sale'] if !opts[:'partner_point_of_sale'].nil?
      query_params[:'payment_terms'] = opts[:'payment_terms'] if !opts[:'payment_terms'].nil?
      query_params[:'platform_name'] = opts[:'platform_name'] if !opts[:'platform_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_test_notification_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"NotificationsApi.request_test_notification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#request_test_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request Undelivered Notifications
    # Use this API to fetch undelivered notifications. Up to 25 notifications are returned with each call. Each undelivered notification will be returned only once. 
    # @param undeliverable [Boolean] Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [Array<RequestUndeliveredNotifications200ResponseInner>]
    def request_undelivered_notifications(undeliverable, opts = {})
      data, _status_code, _headers = request_undelivered_notifications_with_http_info(undeliverable, opts)
      data
    end

    # Request Undelivered Notifications
    # Use this API to fetch undelivered notifications. Up to 25 notifications are returned with each call. Each undelivered notification will be returned only once. 
    # @param undeliverable [Boolean] Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
    # @option opts [String] :platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
    # @return [Array<(Array<RequestUndeliveredNotifications200ResponseInner>, Integer, Hash)>] Array<RequestUndeliveredNotifications200ResponseInner> data, response status code and response headers
    def request_undelivered_notifications_with_http_info(undeliverable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationsApi.request_undelivered_notifications ...'
      end
      # verify the required parameter 'undeliverable' is set
      if @api_client.config.client_side_validation && undeliverable.nil?
        fail ArgumentError, "Missing the required parameter 'undeliverable' when calling NotificationsApi.request_undelivered_notifications"
      end
      # resource path
      local_var_path = '/notifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'undeliverable'] = undeliverable
      query_params[:'billing_terms'] = opts[:'billing_terms'] if !opts[:'billing_terms'].nil?
      query_params[:'partner_point_of_sale'] = opts[:'partner_point_of_sale'] if !opts[:'partner_point_of_sale'].nil?
      query_params[:'payment_terms'] = opts[:'payment_terms'] if !opts[:'payment_terms'].nil?
      query_params[:'platform_name'] = opts[:'platform_name'] if !opts[:'platform_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RequestUndeliveredNotifications200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['rapidAuth']

      new_options = opts.merge(
        :operation => :"NotificationsApi.request_undelivered_notifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#request_undelivered_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
