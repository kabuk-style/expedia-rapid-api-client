# frozen_string_literal: true

# THIS IS NOT AUTOGENERATED
#
# Wrapper for the response headers from the Expedia API
#
# This class provides methods to access custom headers and general headers
# that are returned in the API response.
#
# @see https://developers.expediagroup.com/docs/products/rapid/lodging/content#api-details
#
# @example
#   data, status, headers = content_api_client.get_property_content_with_http_info(accept, accept_encoding, user_agent, language, supply_source, opts)
#   headers = ApiResponseHeaders.new(headers)
#   puts headers.rate_limit.day
#   puts headers.link
module ExpediaRapid
  class ApiResponseHeaders
    class RateLimit
      # @param headers [Faraday::Utils::Headers] The response headers
      def initialize(headers)
        @headers = headers
      end

      def day
        @headers['rate-limit-day']
      end

      def day_remaining
        @headers['rate-limit-day-remaining']
      end

      def day_reset
        @headers['rate-limit-day-reset']
      end

      def minute_remaining
        @headers['rate-limit-minute-remaining']
      end

      def minute_reset
        @headers['rate-limit-minute-reset']
      end

      def reduction_status
        @headers['rate-limit-reduction-status']
      end
    end

    class Link
      attr_reader :url, :rel, :expires

      # @param link_header [String] The value of the Link header
      #   e.g, `<https://test.ean.com/v3/properties/content?token=Q11RF1Vda1AA==>; rel="next"; expires=2025-05-15T04:26:28.396740369Z`
      def initialize(link_header)
        parse_link_header(link_header) if link_header
      end

      private

      def parse_link_header(header)
        url_match = header.match(/<([^>]+)>/)
        rel_match = header.match(/rel="([^"]+)"/)
        expires_match = header.match(/expires=([^;,\s]+)/)

        @url = url_match[1] if url_match
        @rel = rel_match[1] if rel_match
        @expires = Time.parse(expires_match[1]) if expires_match
      end
    end

    # @param headers [Faraday::Utils::Headers] The response headers
    def initialize(headers)
      @headers = headers
    end

    # Custom Headers
    def link
      @headers['link']
    end

    def load
      @headers['load']
    end

    def pagination_total_results
      @headers['pagination-total-results']
    end

    def rate_limit
      @rate_limit ||= RateLimit.new(@headers)
    end

    def region
      @headers['region']
    end

    def server
      @headers['server']
    end

    def transaction_id
      @headers['transaction-id']
    end

    # General Headers
    def vary
      @headers['vary']
    end

    def content_type
      @headers['content-type']
    end

    def cache_control
      @headers['cache-control']
    end

    def pragma
      @headers['pragma']
    end

    def expires
      @headers['expires']
    end

    def content_type_options
      @headers['x-content-type-options']
    end

    def transport_security
      @headers['strict-transport-security']
    end

    def frame_options
      @headers['x-frame-options']
    end

    def xss_protection
      @headers['x-xss-protection']
    end

    def referrer_policy
      @headers['referrer-policy']
    end

    def date
      @headers['date']
    end

    def transfer_encoding
      @headers['transfer-encoding']
    end

    def connection
      @headers['connection']
    end

    def set_cookie
      @headers['set-cookie']
    end

    def content_length
      @headers['content-length']
    end

    private

    def normalize_headers(headers)
      headers.each_with_object({}) do |header, hash|
        hash[header.downcase] = header
      end
    end
  end
end
